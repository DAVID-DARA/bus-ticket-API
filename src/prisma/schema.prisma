// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid())
  firstName         String
  lastName          String
  email             String        @unique
  password          String
  role              String        @default("USER")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  transactions      Transaction[]
  sentTransfers     Transfer[]    @relation("SentTransfers")
  receivedTransfers Transfer[]    @relation("ReceivedTransfers")
  auditLogs         AuditLog[]
  accounts          Account[]
  userTickets       UserTicket[]
}

model Ticket {
  id        String   @id @default(uuid())
  routeId   String
  price     Float
  available Int
  createdAt DateTime @default(now())
  route     Route    @relation(fields: [routeId], references: [id])
  userTickets UserTicket[]
}

model UserTicket {
  id        String   @id @default(uuid())
  userId    String
  ticketId  String
  status    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
}

model Route {
  id          String   @id @default(uuid())
  origin      String
  destination String
  departureTime DateTime
  arrivalTime DateTime
  price       Float
  tickets     Ticket[]
}

model Account {
  id      String @id @default(uuid())
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id])
  balance Float  @default(0)
}

model Transaction {
  id        String   @id @default(uuid())
  type      String
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Transfer {
  id          String   @id @default(uuid())
  senderId    String
  sender      User     @relation("SentTransfers", fields: [senderId], references: [id])
  recipientId String
  recipient   User     @relation("ReceivedTransfers", fields: [recipientId], references: [id])
  amount      Float
  createdAt   DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  createdAt DateTime @default(now())
}